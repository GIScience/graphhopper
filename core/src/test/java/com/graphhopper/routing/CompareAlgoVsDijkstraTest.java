package com.graphhopper.routing;

import com.graphhopper.Repeat;
import com.graphhopper.RepeatRule;
import com.graphhopper.routing.ch.PrepareContractionHierarchies;
import com.graphhopper.routing.lm.PrepareLandmarks;
import com.graphhopper.routing.subnetwork.PrepareRoutingSubnetworks;
import com.graphhopper.routing.util.CarFlagEncoder;
import com.graphhopper.routing.util.EncodingManager;
import com.graphhopper.routing.util.FlagEncoder;
import com.graphhopper.routing.util.TraversalMode;
import com.graphhopper.routing.weighting.FastestWeighting;
import com.graphhopper.routing.weighting.Weighting;
import com.graphhopper.storage.*;
import com.graphhopper.util.GHUtility;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.util.Arrays;
import java.util.Random;

import static org.junit.Assert.fail;

/**
 * Runs direct comparison between Dijkstra and other algorithms on randomly generated graphs.
 */
@RunWith(Parameterized.class)
public class CompareAlgoVsDijkstraTest {
    private final String algoString;
    // todo: also add edge-based
    private final TraversalMode traversalMode = TraversalMode.NODE_BASED;
    private Directory dir;
    private CarFlagEncoder encoder;
    private Weighting weighting;
    private GraphHopperStorage graph;
    private CHGraph chGraph;
    private NodeAccess na;
    private PrepareLandmarks plm;
    private PrepareContractionHierarchies pch;
    private AlgoFactory algoFactory;
    private long seed;
    private Random rnd;

    @Rule
    public RepeatRule repeatRule = new RepeatRule();

    @Parameterized.Parameters(name = "{0}")
    public static Object[] parameters() {
        return new Object[]{
//                "astar",
//                "astarbi",
                "alt",
//                "ch"
                // todo: add more algos (ch with/without stall-on-demand, edge based, ch with/without astar, lm/ch combination etc.
        };
    }

    public CompareAlgoVsDijkstraTest(String algoString) {
        this.algoString = algoString;
        algoFactory = getAlgoFactory(algoString);
    }

    @Before
    public void init() {
        dir = new RAMDirectory();
        seed = System.nanoTime();
        rnd = new Random(seed);
        encoder = new CarFlagEncoder();
        EncodingManager em = new EncodingManager(encoder);
        weighting = new FastestWeighting(encoder);
        graph = new GraphBuilder(em).setCHGraph(weighting).create();
        chGraph = graph.getGraph(CHGraph.class);
        na = graph.getNodeAccess();
        System.out.println("seed: " + seed);
    }

    /**
     * Use this test to search for failing test cases (graph is printed to console if error is found).
     */
    @Test
    @Repeat(times = 1000)
    public void randomGraph() {
        // increasing number of nodes finds failing test case more quickly, but harder to debug
        int numNodes = 500;
        GHUtility.buildRandomGraph(graph, seed, numNodes, 2.2, true, true, 0.9);
        // we only want to look at fully connected graphs (otherwise we get problems with lm preprocessing)
        // only exit here for very small graphs though, otherwise there will be hardly any graph that works
        if (numNodes < 20 && getNumComponents() > 1) {
            return;
        }
        compareWithDijkstra();
    }

    @Test
    public void failure1() {
        na.setNode(0, 49.408249, 9.706623);
        na.setNode(1, 49.402517, 9.706126);
        na.setNode(2, 49.407259, 9.704586);
        na.setNode(3, 49.402448, 9.701743);
        na.setNode(4, 49.407824, 9.708467);
        na.setNode(5, 49.404076, 9.703126);
        na.setNode(6, 49.401521, 9.708343);
        na.setNode(7, 49.409590, 9.708180);
        na.setNode(8, 49.402218, 9.707801);
        na.setNode(9, 49.405432, 9.701699);
        graph.edge(3, 8, 443.080000, false);
        graph.edge(3, 9, 334.552000, true);
        graph.edge(8, 6, 87.543000, true);
        graph.edge(2, 6, 696.117000, true);
        graph.edge(9, 5, 183.100000, true);
        graph.edge(8, 4, 625.201000, true);
        graph.edge(4, 5, 570.895000, true);
        graph.edge(0, 7, 186.937000, true);
        graph.edge(2, 1, 538.972000, true);
        graph.edge(1, 7, 800.444000, true);
        compareWithDijkstra();
    }

    @Test
    public void failure2() {
        na.setNode(0, 49.401356, 9.709981);
        na.setNode(1, 49.404060, 9.706504);
        na.setNode(2, 49.402297, 9.707753);
        na.setNode(3, 49.406333, 9.705954);
        na.setNode(4, 49.407902, 9.707033);
        na.setNode(5, 49.408493, 9.708042);
        na.setNode(6, 49.402978, 9.707720);
        na.setNode(7, 49.401923, 9.709657);
        na.setNode(8, 49.409824, 9.703268);
        na.setNode(9, 49.408189, 9.706820);
        na.setNode(10, 49.406989, 9.702563);
        na.setNode(11, 49.400188, 9.700618);
        na.setNode(12, 49.407497, 9.703106);
        na.setNode(13, 49.406428, 9.706218);
        na.setNode(14, 49.404405, 9.706979);
        graph.edge(13, 3, 21.889000, false);
        graph.edge(1, 7, 329.368000, false);
        graph.edge(2, 0, 193.828000, false);
        graph.edge(1, 2, 215.843000, true);
        graph.edge(0, 8, 1065.042000, true);
        graph.edge(7, 0, 67.463000, false);
        graph.edge(3, 5, 283.808000, true);
        graph.edge(7, 4, 692.211000, true);
        graph.edge(10, 11, 772.877000, true);
        graph.edge(14, 14, 0.000000, true);
        graph.edge(1, 13, 265.386000, true);
        graph.edge(10, 13, 271.717000, false);
        graph.edge(13, 10, 272.023000, true);
        graph.edge(6, 6, 0.000000, true);
        graph.edge(12, 7, 780.237000, true);
        graph.edge(5, 7, 747.208000, true);
        graph.edge(9, 6, 584.323000, true);
        graph.edge(10, 7, 767.711000, true);
        compareWithDijkstra();
    }

    @Test
    public void failure3() {
        na.setNode(0, 49.409696, 9.702343);
        na.setNode(1, 49.408076, 9.701021);
        na.setNode(2, 49.401475, 9.706790);
        na.setNode(3, 49.400892, 9.706083);
        na.setNode(4, 49.402244, 9.704128);
        na.setNode(5, 49.406651, 9.701573);
        na.setNode(6, 49.400498, 9.700916);
        na.setNode(7, 49.401397, 9.703822);
        na.setNode(8, 49.404309, 9.707009);
        na.setNode(9, 49.406880, 9.701170);
        graph.edge(9, 0, 325.779000, false);
        graph.edge(8, 5, 471.731000, true);
        graph.edge(9, 7, 639.138000, true);
        graph.edge(6, 0, 1037.960000, true);
        graph.edge(1, 8, 608.262000, true);
        graph.edge(4, 1, 689.234000, true);
        graph.edge(1, 7, 776.216000, true);
        graph.edge(6, 2, 441.307000, true);
        graph.edge(8, 3, 387.528000, false);
        graph.edge(2, 5, 688.273000, true);
        compareWithDijkstra();
    }

    @Test
    public void failure4() {
        na.setNode(0, 49.407526, 9.703531);
        na.setNode(1, 49.402846, 9.700137);
        na.setNode(2, 49.403182, 9.706732);
        na.setNode(3, 49.409288, 9.701723);
        na.setNode(4, 49.405749, 9.708547);
        na.setNode(5, 49.406333, 9.702371);
        na.setNode(6, 49.406428, 9.708022);
        na.setNode(7, 49.401145, 9.703700);
        na.setNode(8, 49.409966, 9.700537);
        na.setNode(9, 49.401508, 9.702562);
        na.setNode(10, 49.407164, 9.705054);
        na.setNode(11, 49.405738, 9.705780);
        na.setNode(12, 49.403938, 9.704747);
        na.setNode(13, 49.409263, 9.704656);
        na.setNode(14, 49.402918, 9.709263);
        na.setNode(15, 49.404358, 9.707670);
        na.setNode(16, 49.405576, 9.703848);
        na.setNode(17, 49.409716, 9.706331);
        na.setNode(18, 49.403799, 9.709143);
        na.setNode(19, 49.400819, 9.702230);
        na.setNode(20, 49.409903, 9.705586);
        na.setNode(21, 49.400388, 9.702981);
        na.setNode(22, 49.403189, 9.708043);
        na.setNode(23, 49.400593, 9.701009);
        na.setNode(24, 49.409311, 9.709532);
        na.setNode(25, 49.405162, 9.701868);
        na.setNode(26, 49.405972, 9.707737);
        na.setNode(27, 49.400033, 9.708161);
        na.setNode(28, 49.404746, 9.704378);
        na.setNode(29, 49.405782, 9.701015);
        na.setNode(30, 49.404211, 9.705431);
        na.setNode(31, 49.403710, 9.703567);
        na.setNode(32, 49.403967, 9.709720);
        na.setNode(33, 49.400153, 9.709895);
        na.setNode(34, 49.402640, 9.704435);
        na.setNode(35, 49.400373, 9.708494);
        na.setNode(36, 49.405487, 9.708784);
        na.setNode(37, 49.404202, 9.701497);
        na.setNode(38, 49.408849, 9.701171);
        na.setNode(39, 49.400517, 9.709589);
        na.setNode(40, 49.409357, 9.701022);
        na.setNode(41, 49.406550, 9.707843);
        na.setNode(42, 49.405561, 9.703730);
        na.setNode(43, 49.401100, 9.709550);
        na.setNode(44, 49.408402, 9.706045);
        na.setNode(45, 49.407756, 9.703514);
        na.setNode(46, 49.404870, 9.709663);
        na.setNode(47, 49.405389, 9.705282);
        na.setNode(48, 49.406056, 9.702821);
        na.setNode(49, 49.408402, 9.704267);
        na.setNode(50, 49.406831, 9.703195);
        na.setNode(51, 49.408456, 9.706867);
        na.setNode(52, 49.409426, 9.700594);
        na.setNode(53, 49.402754, 9.700304);
        na.setNode(54, 49.407277, 9.704583);
        na.setNode(55, 49.401333, 9.703150);
        na.setNode(56, 49.408712, 9.700460);
        na.setNode(57, 49.407281, 9.706271);
        na.setNode(58, 49.402253, 9.706781);
        na.setNode(59, 49.409324, 9.702290);
        na.setNode(60, 49.406628, 9.709055);
        na.setNode(61, 49.405770, 9.702552);
        na.setNode(62, 49.408950, 9.707129);
        na.setNode(63, 49.402495, 9.708070);
        na.setNode(64, 49.403936, 9.708297);
        na.setNode(65, 49.405307, 9.704934);
        na.setNode(66, 49.405515, 9.704258);
        na.setNode(67, 49.408835, 9.705303);
        na.setNode(68, 49.409756, 9.707621);
        na.setNode(69, 49.409883, 9.702204);
        na.setNode(70, 49.404622, 9.702899);
        na.setNode(71, 49.403114, 9.700143);
        na.setNode(72, 49.407752, 9.707659);
        na.setNode(73, 49.400868, 9.703757);
        na.setNode(74, 49.408197, 9.701795);
        na.setNode(75, 49.406923, 9.703631);
        na.setNode(76, 49.401853, 9.706814);
        na.setNode(77, 49.406128, 9.701782);
        na.setNode(78, 49.403163, 9.702413);
        na.setNode(79, 49.407926, 9.709291);
        na.setNode(80, 49.407626, 9.704662);
        na.setNode(81, 49.402037, 9.705101);
        na.setNode(82, 49.400597, 9.708656);
        na.setNode(83, 49.408817, 9.708094);
        na.setNode(84, 49.407941, 9.708635);
        na.setNode(85, 49.405132, 9.704214);
        na.setNode(86, 49.403191, 9.700253);
        na.setNode(87, 49.409000, 9.706619);
        na.setNode(88, 49.404060, 9.702930);
        na.setNode(89, 49.402688, 9.709650);
        na.setNode(90, 49.408373, 9.705045);
        na.setNode(91, 49.404487, 9.706720);
        na.setNode(92, 49.405779, 9.701088);
        na.setNode(93, 49.403951, 9.708162);
        na.setNode(94, 49.407003, 9.707845);
        na.setNode(95, 49.404037, 9.707529);
        na.setNode(96, 49.406761, 9.706186);
        na.setNode(97, 49.406301, 9.703866);
        na.setNode(98, 49.400006, 9.706076);
        na.setNode(99, 49.402032, 9.703111);
        na.setNode(100, 49.403688, 9.705092);
        na.setNode(101, 49.403097, 9.703868);
        na.setNode(102, 49.407824, 9.704876);
        na.setNode(103, 49.401101, 9.701594);
        na.setNode(104, 49.400371, 9.705728);
        na.setNode(105, 49.402463, 9.700467);
        na.setNode(106, 49.400090, 9.706875);
        na.setNode(107, 49.400009, 9.704081);
        na.setNode(108, 49.400445, 9.708776);
        na.setNode(109, 49.408769, 9.704500);
        na.setNode(110, 49.405378, 9.704330);
        na.setNode(111, 49.404800, 9.704194);
        na.setNode(112, 49.404781, 9.707792);
        na.setNode(113, 49.401072, 9.706897);
        na.setNode(114, 49.403436, 9.703818);
        na.setNode(115, 49.403718, 9.701533);
        na.setNode(116, 49.402256, 9.704152);
        na.setNode(117, 49.405269, 9.708012);
        na.setNode(118, 49.404775, 9.706177);
        na.setNode(119, 49.408911, 9.704904);
        na.setNode(120, 49.405003, 9.705791);
        na.setNode(121, 49.409224, 9.706817);
        na.setNode(122, 49.404994, 9.706901);
        na.setNode(123, 49.400418, 9.703609);
        na.setNode(124, 49.401787, 9.701176);
        na.setNode(125, 49.402621, 9.704506);
        na.setNode(126, 49.403729, 9.704675);
        na.setNode(127, 49.400455, 9.707642);
        na.setNode(128, 49.405621, 9.702446);
        na.setNode(129, 49.405808, 9.709599);
        na.setNode(130, 49.400605, 9.708245);
        na.setNode(131, 49.408503, 9.700089);
        na.setNode(132, 49.404276, 9.704191);
        na.setNode(133, 49.404382, 9.704106);
        na.setNode(134, 49.403083, 9.704322);
        na.setNode(135, 49.400210, 9.707574);
        na.setNode(136, 49.404804, 9.706787);
        na.setNode(137, 49.408784, 9.702824);
        na.setNode(138, 49.403565, 9.701724);
        na.setNode(139, 49.405612, 9.707051);
        na.setNode(140, 49.405708, 9.705750);
        na.setNode(141, 49.400648, 9.700338);
        na.setNode(142, 49.405664, 9.709425);
        na.setNode(143, 49.404676, 9.709780);
        na.setNode(144, 49.402899, 9.701050);
        na.setNode(145, 49.400169, 9.702795);
        na.setNode(146, 49.402007, 9.708741);
        na.setNode(147, 49.400690, 9.705791);
        na.setNode(148, 49.408064, 9.702826);
        na.setNode(149, 49.401257, 9.704020);
        na.setNode(150, 49.408454, 9.702316);
        na.setNode(151, 49.404480, 9.704673);
        na.setNode(152, 49.400586, 9.702451);
        na.setNode(153, 49.403708, 9.708051);
        na.setNode(154, 49.402119, 9.705126);
        na.setNode(155, 49.404992, 9.700994);
        na.setNode(156, 49.406640, 9.700397);
        na.setNode(157, 49.404187, 9.702655);
        na.setNode(158, 49.403082, 9.705189);
        na.setNode(159, 49.404227, 9.705181);
        na.setNode(160, 49.401608, 9.704837);
        na.setNode(161, 49.400245, 9.700896);
        na.setNode(162, 49.402160, 9.704168);
        na.setNode(163, 49.407036, 9.703172);
        na.setNode(164, 49.404434, 9.707427);
        na.setNode(165, 49.404149, 9.700336);
        na.setNode(166, 49.409636, 9.700579);
        na.setNode(167, 49.408803, 9.700679);
        na.setNode(168, 49.405068, 9.705232);
        na.setNode(169, 49.405786, 9.701926);
        na.setNode(170, 49.402315, 9.700783);
        na.setNode(171, 49.406496, 9.700352);
        na.setNode(172, 49.408608, 9.700216);
        na.setNode(173, 49.406374, 9.703160);
        na.setNode(174, 49.408799, 9.705469);
        na.setNode(175, 49.401116, 9.702692);
        na.setNode(176, 49.402302, 9.700258);
        na.setNode(177, 49.407267, 9.702575);
        na.setNode(178, 49.405360, 9.701815);
        na.setNode(179, 49.402042, 9.704023);
        na.setNode(180, 49.404014, 9.708139);
        na.setNode(181, 49.400595, 9.705145);
        na.setNode(182, 49.407297, 9.704030);
        na.setNode(183, 49.406281, 9.707339);
        na.setNode(184, 49.403314, 9.707436);
        na.setNode(185, 49.401000, 9.700661);
        na.setNode(186, 49.403151, 9.707465);
        na.setNode(187, 49.408130, 9.704349);
        na.setNode(188, 49.408797, 9.706773);
        na.setNode(189, 49.400229, 9.709655);
        na.setNode(190, 49.401677, 9.703995);
        na.setNode(191, 49.407260, 9.709550);
        na.setNode(192, 49.407789, 9.706380);
        na.setNode(193, 49.408835, 9.703942);
        na.setNode(194, 49.403933, 9.708859);
        na.setNode(195, 49.405730, 9.709627);
        na.setNode(196, 49.407060, 9.703395);
        na.setNode(197, 49.401752, 9.701343);
        na.setNode(198, 49.405398, 9.701666);
        na.setNode(199, 49.406935, 9.704030);
        na.setNode(200, 49.405672, 9.704864);
        na.setNode(201, 49.406998, 9.706681);
        na.setNode(202, 49.405469, 9.706744);
        na.setNode(203, 49.402003, 9.705013);
        na.setNode(204, 49.403611, 9.709874);
        na.setNode(205, 49.409262, 9.703586);
        na.setNode(206, 49.404249, 9.700551);
        na.setNode(207, 49.401638, 9.707988);
        na.setNode(208, 49.402319, 9.704777);
        na.setNode(209, 49.402637, 9.704217);
        na.setNode(210, 49.408989, 9.706318);
        na.setNode(211, 49.403927, 9.705498);
        na.setNode(212, 49.405769, 9.707938);
        na.setNode(213, 49.409251, 9.706438);
        na.setNode(214, 49.405078, 9.708639);
        na.setNode(215, 49.401116, 9.700621);
        na.setNode(216, 49.403216, 9.702959);
        na.setNode(217, 49.403061, 9.700545);
        na.setNode(218, 49.408958, 9.703196);
        na.setNode(219, 49.400859, 9.708152);
        na.setNode(220, 49.407246, 9.701827);
        na.setNode(221, 49.400562, 9.700092);
        na.setNode(222, 49.402849, 9.709305);
        na.setNode(223, 49.409951, 9.704352);
        na.setNode(224, 49.403272, 9.701921);
        na.setNode(225, 49.402669, 9.703904);
        na.setNode(226, 49.403668, 9.705504);
        na.setNode(227, 49.401053, 9.708614);
        na.setNode(228, 49.409096, 9.703333);
        na.setNode(229, 49.404541, 9.708840);
        na.setNode(230, 49.401021, 9.700844);
        na.setNode(231, 49.405415, 9.702835);
        na.setNode(232, 49.405680, 9.705447);
        na.setNode(233, 49.402580, 9.705371);
        na.setNode(234, 49.401651, 9.707109);
        na.setNode(235, 49.407112, 9.706849);
        na.setNode(236, 49.402744, 9.704213);
        na.setNode(237, 49.400394, 9.700554);
        na.setNode(238, 49.400236, 9.709644);
        na.setNode(239, 49.406781, 9.700707);
        na.setNode(240, 49.405349, 9.704077);
        na.setNode(241, 49.407955, 9.705465);
        na.setNode(242, 49.408900, 9.706982);
        na.setNode(243, 49.405398, 9.707156);
        na.setNode(244, 49.400068, 9.700993);
        na.setNode(245, 49.400729, 9.706664);
        na.setNode(246, 49.400340, 9.701989);
        na.setNode(247, 49.401069, 9.700108);
        na.setNode(248, 49.401904, 9.705478);
        na.setNode(249, 49.408019, 9.703759);
        na.setNode(250, 49.401933, 9.709689);
        na.setNode(251, 49.404375, 9.707443);
        na.setNode(252, 49.405568, 9.707151);
        na.setNode(253, 49.402298, 9.707647);
        na.setNode(254, 49.400720, 9.709495);
        na.setNode(255, 49.400248, 9.708951);
        na.setNode(256, 49.407261, 9.704693);
        na.setNode(257, 49.403770, 9.706494);
        na.setNode(258, 49.401651, 9.702022);
        na.setNode(259, 49.406909, 9.702746);
        na.setNode(260, 49.405595, 9.707687);
        na.setNode(261, 49.406933, 9.709028);
        na.setNode(262, 49.403954, 9.703181);
        na.setNode(263, 49.404871, 9.705954);
        na.setNode(264, 49.402769, 9.709272);
        na.setNode(265, 49.408391, 9.707214);
        na.setNode(266, 49.403039, 9.700759);
        na.setNode(267, 49.401501, 9.708019);
        na.setNode(268, 49.409657, 9.701067);
        na.setNode(269, 49.407680, 9.702884);
        na.setNode(270, 49.407794, 9.701166);
        na.setNode(271, 49.409168, 9.707427);
        na.setNode(272, 49.400921, 9.704294);
        na.setNode(273, 49.405356, 9.705391);
        na.setNode(274, 49.405675, 9.706556);
        na.setNode(275, 49.407474, 9.705177);
        na.setNode(276, 49.408790, 9.703564);
        na.setNode(277, 49.405123, 9.709854);
        na.setNode(278, 49.400460, 9.705007);
        na.setNode(279, 49.402575, 9.700821);
        na.setNode(280, 49.406639, 9.702260);
        na.setNode(281, 49.409227, 9.708073);
        na.setNode(282, 49.400059, 9.708972);
        na.setNode(283, 49.409106, 9.709392);
        na.setNode(284, 49.406000, 9.700964);
        na.setNode(285, 49.408911, 9.706667);
        na.setNode(286, 49.404256, 9.709667);
        na.setNode(287, 49.402713, 9.700031);
        na.setNode(288, 49.403128, 9.702876);
        na.setNode(289, 49.404151, 9.709533);
        na.setNode(290, 49.404770, 9.707630);
        na.setNode(291, 49.403701, 9.709655);
        na.setNode(292, 49.403779, 9.702670);
        na.setNode(293, 49.409470, 9.704164);
        na.setNode(294, 49.402513, 9.702111);
        na.setNode(295, 49.404809, 9.707459);
        na.setNode(296, 49.407299, 9.707723);
        na.setNode(297, 49.405048, 9.703925);
        na.setNode(298, 49.409436, 9.704509);
        na.setNode(299, 49.408612, 9.708593);
        na.setNode(300, 49.403689, 9.703183);
        na.setNode(301, 49.404921, 9.700838);
        na.setNode(302, 49.404839, 9.703545);
        na.setNode(303, 49.402567, 9.707829);
        na.setNode(304, 49.409762, 9.704796);
        na.setNode(305, 49.406501, 9.705952);
        na.setNode(306, 49.408527, 9.702365);
        na.setNode(307, 49.402205, 9.706536);
        na.setNode(308, 49.403017, 9.705962);
        na.setNode(309, 49.408188, 9.706878);
        na.setNode(310, 49.405704, 9.700275);
        na.setNode(311, 49.405479, 9.708774);
        na.setNode(312, 49.404393, 9.707942);
        na.setNode(313, 49.404332, 9.704538);
        na.setNode(314, 49.400971, 9.704291);
        na.setNode(315, 49.403773, 9.704857);
        na.setNode(316, 49.403496, 9.704677);
        na.setNode(317, 49.409297, 9.703723);
        na.setNode(318, 49.401334, 9.708212);
        na.setNode(319, 49.407586, 9.703163);
        na.setNode(320, 49.402468, 9.706166);
        na.setNode(321, 49.404884, 9.704509);
        na.setNode(322, 49.400583, 9.709405);
        na.setNode(323, 49.407390, 9.703555);
        na.setNode(324, 49.407104, 9.706831);
        na.setNode(325, 49.407882, 9.704118);
        na.setNode(326, 49.409935, 9.705998);
        na.setNode(327, 49.402680, 9.708197);
        na.setNode(328, 49.406367, 9.707833);
        na.setNode(329, 49.406989, 9.701281);
        na.setNode(330, 49.402324, 9.709676);
        na.setNode(331, 49.404713, 9.708108);
        na.setNode(332, 49.403927, 9.704777);
        na.setNode(333, 49.400875, 9.707685);
        na.setNode(334, 49.400224, 9.701776);
        na.setNode(335, 49.400955, 9.706264);
        na.setNode(336, 49.407852, 9.704744);
        na.setNode(337, 49.401635, 9.703561);
        na.setNode(338, 49.409372, 9.702877);
        na.setNode(339, 49.401731, 9.700572);
        na.setNode(340, 49.407096, 9.709112);
        na.setNode(341, 49.400396, 9.706999);
        na.setNode(342, 49.403297, 9.708581);
        na.setNode(343, 49.402101, 9.702540);
        na.setNode(344, 49.405908, 9.701096);
        na.setNode(345, 49.404330, 9.709048);
        na.setNode(346, 49.406017, 9.706673);
        na.setNode(347, 49.404455, 9.709948);
        na.setNode(348, 49.409792, 9.709456);
        na.setNode(349, 49.406839, 9.709171);
        na.setNode(350, 49.402803, 9.703372);
        na.setNode(351, 49.409846, 9.704363);
        na.setNode(352, 49.409164, 9.702329);
        na.setNode(353, 49.405159, 9.708144);
        na.setNode(354, 49.401378, 9.708845);
        na.setNode(355, 49.408559, 9.706801);
        na.setNode(356, 49.409323, 9.707611);
        na.setNode(357, 49.402153, 9.707938);
        na.setNode(358, 49.408447, 9.704698);
        na.setNode(359, 49.402937, 9.707356);
        na.setNode(360, 49.407879, 9.708852);
        na.setNode(361, 49.401537, 9.700681);
        na.setNode(362, 49.408934, 9.708640);
        na.setNode(363, 49.407959, 9.707138);
        na.setNode(364, 49.403269, 9.708103);
        na.setNode(365, 49.408315, 9.701262);
        na.setNode(366, 49.407808, 9.703990);
        na.setNode(367, 49.407578, 9.703306);
        na.setNode(368, 49.400493, 9.709653);
        na.setNode(369, 49.408657, 9.700641);
        na.setNode(370, 49.406885, 9.704262);
        na.setNode(371, 49.407344, 9.700548);
        na.setNode(372, 49.402700, 9.701113);
        na.setNode(373, 49.406004, 9.709442);
        na.setNode(374, 49.401483, 9.705488);
        na.setNode(375, 49.406296, 9.704808);
        na.setNode(376, 49.409763, 9.700790);
        na.setNode(377, 49.402634, 9.703898);
        na.setNode(378, 49.404323, 9.701491);
        na.setNode(379, 49.403649, 9.707591);
        na.setNode(380, 49.407465, 9.702784);
        na.setNode(381, 49.408466, 9.708721);
        na.setNode(382, 49.406544, 9.709806);
        na.setNode(383, 49.408273, 9.701660);
        na.setNode(384, 49.403452, 9.703771);
        na.setNode(385, 49.401345, 9.703957);
        na.setNode(386, 49.408231, 9.708432);
        na.setNode(387, 49.401476, 9.701451);
        na.setNode(388, 49.408546, 9.707909);
        na.setNode(389, 49.405576, 9.705414);
        na.setNode(390, 49.403324, 9.706123);
        na.setNode(391, 49.406104, 9.704021);
        na.setNode(392, 49.404601, 9.708807);
        na.setNode(393, 49.407960, 9.700711);
        na.setNode(394, 49.406300, 9.701404);
        na.setNode(395, 49.407454, 9.708851);
        na.setNode(396, 49.402487, 9.700013);
        na.setNode(397, 49.403092, 9.705539);
        na.setNode(398, 49.400513, 9.708012);
        na.setNode(399, 49.404016, 9.707326);
        na.setNode(400, 49.406368, 9.707957);
        na.setNode(401, 49.402175, 9.707194);
        na.setNode(402, 49.400562, 9.706956);
        na.setNode(403, 49.408552, 9.705212);
        na.setNode(404, 49.402894, 9.703805);
        na.setNode(405, 49.402112, 9.704950);
        na.setNode(406, 49.403585, 9.707896);
        na.setNode(407, 49.402519, 9.703952);
        na.setNode(408, 49.406433, 9.703151);
        na.setNode(409, 49.404135, 9.709353);
        na.setNode(410, 49.406851, 9.705022);
        na.setNode(411, 49.409334, 9.709087);
        na.setNode(412, 49.403999, 9.705020);
        na.setNode(413, 49.403719, 9.704990);
        na.setNode(414, 49.401538, 9.705146);
        na.setNode(415, 49.404512, 9.706652);
        na.setNode(416, 49.405977, 9.704096);
        na.setNode(417, 49.406055, 9.703822);
        na.setNode(418, 49.405078, 9.708196);
        na.setNode(419, 49.403157, 9.700836);
        na.setNode(420, 49.401306, 9.702644);
        na.setNode(421, 49.403823, 9.708638);
        na.setNode(422, 49.406955, 9.702800);
        na.setNode(423, 49.407832, 9.708742);
        na.setNode(424, 49.408234, 9.701065);
        na.setNode(425, 49.406536, 9.708703);
        na.setNode(426, 49.405331, 9.702160);
        na.setNode(427, 49.402317, 9.700573);
        na.setNode(428, 49.404292, 9.708517);
        na.setNode(429, 49.403201, 9.702176);
        na.setNode(430, 49.404391, 9.707924);
        na.setNode(431, 49.409245, 9.706044);
        na.setNode(432, 49.401606, 9.707572);
        na.setNode(433, 49.402572, 9.702358);
        na.setNode(434, 49.404790, 9.702224);
        na.setNode(435, 49.402144, 9.700363);
        na.setNode(436, 49.406192, 9.709325);
        na.setNode(437, 49.407729, 9.707355);
        na.setNode(438, 49.402073, 9.700604);
        na.setNode(439, 49.404884, 9.705587);
        na.setNode(440, 49.402356, 9.707927);
        na.setNode(441, 49.404263, 9.705207);
        na.setNode(442, 49.400468, 9.701012);
        na.setNode(443, 49.404033, 9.705678);
        na.setNode(444, 49.405845, 9.705968);
        na.setNode(445, 49.403811, 9.709074);
        na.setNode(446, 49.401923, 9.706566);
        na.setNode(447, 49.402136, 9.706074);
        na.setNode(448, 49.401866, 9.704669);
        na.setNode(449, 49.407209, 9.709534);
        na.setNode(450, 49.402769, 9.702278);
        na.setNode(451, 49.402426, 9.701111);
        na.setNode(452, 49.406618, 9.705317);
        na.setNode(453, 49.404006, 9.703567);
        na.setNode(454, 49.402904, 9.708437);
        na.setNode(455, 49.407966, 9.705094);
        na.setNode(456, 49.403467, 9.700895);
        na.setNode(457, 49.407613, 9.702303);
        na.setNode(458, 49.404865, 9.705851);
        na.setNode(459, 49.400742, 9.705351);
        na.setNode(460, 49.407392, 9.709351);
        na.setNode(461, 49.407841, 9.702091);
        na.setNode(462, 49.402684, 9.700631);
        na.setNode(463, 49.408699, 9.708098);
        na.setNode(464, 49.403840, 9.702455);
        na.setNode(465, 49.405069, 9.705975);
        na.setNode(466, 49.402900, 9.708720);
        na.setNode(467, 49.401248, 9.700409);
        na.setNode(468, 49.400625, 9.706678);
        na.setNode(469, 49.402832, 9.705130);
        na.setNode(470, 49.402619, 9.702869);
        na.setNode(471, 49.406232, 9.704139);
        na.setNode(472, 49.403989, 9.705048);
        na.setNode(473, 49.408050, 9.702344);
        na.setNode(474, 49.402003, 9.707240);
        na.setNode(475, 49.403875, 9.700108);
        na.setNode(476, 49.402484, 9.701434);
        na.setNode(477, 49.400691, 9.702105);
        na.setNode(478, 49.401059, 9.707341);
        na.setNode(479, 49.405705, 9.703359);
        na.setNode(480, 49.404778, 9.701182);
        na.setNode(481, 49.407094, 9.704370);
        na.setNode(482, 49.403133, 9.705488);
        na.setNode(483, 49.408981, 9.702830);
        na.setNode(484, 49.400043, 9.704573);
        na.setNode(485, 49.403734, 9.701586);
        na.setNode(486, 49.409971, 9.704486);
        na.setNode(487, 49.409606, 9.701238);
        na.setNode(488, 49.402042, 9.702031);
        na.setNode(489, 49.400675, 9.701026);
        na.setNode(490, 49.405738, 9.704732);
        na.setNode(491, 49.409060, 9.703517);
        na.setNode(492, 49.400556, 9.702534);
        na.setNode(493, 49.406475, 9.707020);
        na.setNode(494, 49.409886, 9.702418);
        na.setNode(495, 49.403333, 9.704605);
        na.setNode(496, 49.406276, 9.709170);
        na.setNode(497, 49.408786, 9.700149);
        na.setNode(498, 49.401235, 9.709052);
        na.setNode(499, 49.404396, 9.709933);
        graph.edge(477, 486, 1046.101000, true);
        graph.edge(141, 441, 534.521000, true);
        graph.edge(53, 297, 366.327000, true);
        graph.edge(2, 265, 581.589000, true);
        graph.edge(196, 236, 483.563000, true);
        graph.edge(150, 315, 555.738000, true);
        graph.edge(344, 463, 594.145000, true);
        graph.edge(13, 192, 206.237000, true);
        graph.edge(67, 415, 490.553000, true);
        graph.edge(66, 287, 436.888000, true);
        graph.edge(91, 188, 482.412000, true);
        graph.edge(363, 423, 117.270000, true);
        graph.edge(47, 64, 272.802000, true);
        graph.edge(200, 344, 276.354000, true);
        graph.edge(84, 213, 216.775000, true);
        graph.edge(17, 162, 857.597000, true);
        graph.edge(133, 299, 575.171000, true);
        graph.edge(427, 497, 724.625000, true);
        graph.edge(233, 332, 156.561000, true);
        graph.edge(67, 249, 144.854000, false);
        graph.edge(12, 353, 281.140000, true);
        graph.edge(96, 221, 825.272000, true);
        graph.edge(193, 38, 200.504000, false);
        graph.edge(156, 480, 214.727000, true);
        graph.edge(298, 363, 251.316000, true);
        graph.edge(61, 387, 484.756000, true);
        graph.edge(38, 255, 1119.954000, true);
        graph.edge(213, 305, 308.043000, true);
        graph.edge(280, 364, 565.416000, true);
        graph.edge(127, 226, 391.612000, true);
        graph.edge(350, 372, 165.353000, true);
        graph.edge(117, 325, 406.353000, true);
        graph.edge(118, 284, 401.107000, false);
        graph.edge(347, 398, 464.025000, true);
        graph.edge(29, 435, 411.172000, true);
        graph.edge(58, 242, 742.063000, true);
        graph.edge(287, 246, 301.251000, false);
        graph.edge(203, 356, 843.658000, true);
        graph.edge(229, 493, 252.897000, false);
        graph.edge(453, 34, 164.767000, false);
        graph.edge(90, 182, 141.496000, true);
        graph.edge(225, 362, 778.408000, true);
        graph.edge(353, 375, 273.640000, true);
        graph.edge(37, 348, 850.466000, true);
        graph.edge(13, 263, 499.269000, true);
        graph.edge(92, 477, 575.695000, true);
        graph.edge(242, 461, 372.995000, true);
        graph.edge(389, 465, 69.685000, true);
        graph.edge(185, 251, 619.551000, true);
        graph.edge(259, 373, 497.942000, true);
        graph.edge(377, 91, 290.715000, false);
        graph.edge(356, 399, 590.477000, true);
        graph.edge(238, 210, 1007.738000, false);
        graph.edge(251, 374, 351.437000, true);
        graph.edge(328, 433, 578.923000, true);
        graph.edge(222, 441, 336.499000, true);
        graph.edge(299, 60, 224.598000, false);
        graph.edge(223, 401, 888.796000, false);
        graph.edge(248, 472, 235.482000, true);
        graph.edge(77, 115, 271.230000, true);
        graph.edge(175, 68, 1029.944000, false);
        graph.edge(193, 304, 120.166000, true);
        graph.edge(369, 374, 871.580000, false);
        graph.edge(153, 204, 133.272000, true);
        graph.edge(21, 135, 334.111000, true);
        graph.edge(284, 287, 372.459000, true);
        graph.edge(214, 402, 519.046000, true);
        graph.edge(66, 463, 454.434000, true);
        graph.edge(215, 288, 279.571000, true);
        graph.edge(53, 130, 623.595000, true);
        graph.edge(88, 351, 657.543000, true);
        graph.edge(15, 361, 600.119000, true);
        graph.edge(100, 424, 585.583000, true);
        graph.edge(70, 386, 569.798000, true);
        graph.edge(213, 420, 928.291000, true);
        graph.edge(1, 311, 690.162000, true);
        graph.edge(48, 199, 131.175000, true);
        graph.edge(214, 484, 633.574000, true);
        graph.edge(55, 114, 239.001000, true);
        graph.edge(422, 491, 239.780000, true);
        graph.edge(132, 344, 290.084000, true);
        graph.edge(103, 66, 530.076000, false);
        graph.edge(61, 471, 125.835000, true);
        graph.edge(490, 212, 231.965000, false);
        graph.edge(82, 110, 621.396000, true);
        graph.edge(11, 170, 527.590000, true);
        graph.edge(107, 236, 305.186000, true);
        graph.edge(203, 411, 868.865000, true);
        graph.edge(83, 365, 497.480000, false);
        graph.edge(158, 341, 328.037000, true);
        graph.edge(455, 433, 632.902000, false);
        graph.edge(246, 338, 1014.394000, true);
        graph.edge(26, 451, 624.270000, false);
        graph.edge(258, 346, 590.794000, true);
        graph.edge(121, 129, 432.386000, true);
        graph.edge(8, 118, 712.780000, true);
        graph.edge(300, 215, 342.856000, false);
        graph.edge(34, 101, 65.416000, true);
        graph.edge(131, 478, 987.442000, true);
        graph.edge(261, 496, 74.455000, true);
        graph.edge(80, 133, 366.170000, true);
        graph.edge(242, 282, 996.399000, true);
        graph.edge(81, 235, 578.302000, true);
        graph.edge(66, 59, 450.178000, false);
        graph.edge(90, 466, 664.095000, true);
        graph.edge(331, 422, 461.846000, true);
        graph.edge(400, 354, 559.266000, false);
        graph.edge(288, 370, 430.510000, true);
        graph.edge(299, 132, 581.237000, false);
        graph.edge(125, 236, 25.261000, true);
        graph.edge(87, 401, 767.310000, true);
        graph.edge(186, 222, 137.314000, true);
        graph.edge(497, 499, 859.901000, true);
        graph.edge(297, 465, 148.927000, true);
        graph.edge(263, 306, 487.000000, true);
        graph.edge(190, 478, 253.655000, true);
        graph.edge(250, 494, 1039.307000, true);
        graph.edge(273, 366, 290.835000, true);
        graph.edge(14, 250, 113.767000, true);
        graph.edge(63, 176, 569.105000, true);
        graph.edge(105, 344, 389.465000, true);
        graph.edge(121, 237, 1081.594000, true);
        graph.edge(178, 352, 426.346000, true);
        graph.edge(163, 443, 380.021000, true);
        graph.edge(204, 289, 65.153000, true);
        graph.edge(149, 343, 142.827000, true);
        graph.edge(160, 174, 800.942000, true);
        graph.edge(155, 471, 266.081000, true);
        graph.edge(237, 367, 827.743000, true);
        graph.edge(10, 266, 557.933000, true);
        graph.edge(147, 406, 359.236000, true);
        graph.edge(83, 302, 556.180000, true);
        graph.edge(235, 465, 236.461000, true);
        graph.edge(65, 455, 298.391000, true);
        graph.edge(5, 351, 418.424000, true);
        graph.edge(282, 361, 623.230000, true);
        graph.edge(3, 131, 147.077000, true);
        graph.edge(58, 163, 598.184000, true);
        graph.edge(249, 443, 464.494000, true);
        graph.edge(20, 86, 847.011000, true);
        graph.edge(193, 432, 849.976000, true);
        graph.edge(251, 451, 508.903000, true);
        graph.edge(234, 291, 295.911000, true);
        graph.edge(237, 330, 694.128000, false);
        graph.edge(48, 420, 532.694000, true);
        graph.edge(140, 218, 408.683000, true);
        graph.edge(47, 328, 215.394000, true);
        graph.edge(209, 378, 272.389000, false);
        graph.edge(254, 299, 881.533000, true);
        graph.edge(249, 385, 746.429000, true);
        graph.edge(349, 390, 449.047000, true);
        graph.edge(41, 425, 62.709000, true);
        graph.edge(246, 302, 517.331000, true);
        graph.edge(248, 426, 450.393000, true);
        graph.edge(106, 224, 505.783000, true);
        graph.edge(92, 492, 590.120000, true);
        graph.edge(127, 34, 336.008000, false);
        graph.edge(20, 410, 341.973000, true);
        graph.edge(127, 233, 288.905000, true);
        graph.edge(253, 469, 193.347000, true);
        graph.edge(185, 248, 364.770000, true);
        graph.edge(206, 379, 516.680000, true);
        graph.edge(354, 449, 651.185000, true);
        graph.edge(192, 279, 712.620000, true);
        graph.edge(117, 308, 291.027000, true);
        graph.edge(343, 487, 839.829000, true);
        graph.edge(271, 374, 867.885000, true);
        graph.edge(137, 383, 101.641000, true);
        graph.edge(121, 405, 806.290000, true);
        graph.edge(258, 427, 129.262000, false);
        graph.edge(316, 490, 251.440000, false);
        graph.edge(196, 268, 337.102000, true);
        graph.edge(277, 422, 553.269000, true);
        graph.edge(203, 452, 513.582000, true);
        graph.edge(84, 483, 435.692000, true);
        graph.edge(69, 392, 759.586000, true);
        graph.edge(269, 405, 639.256000, true);
        graph.edge(364, 394, 593.590000, true);
        graph.edge(236, 292, 161.082000, true);
        graph.edge(104, 254, 276.553000, false);
        graph.edge(179, 495, 150.182000, false);
        graph.edge(158, 446, 162.969000, true);
        graph.edge(95, 232, 236.733000, true);
        graph.edge(28, 168, 71.894000, true);
        graph.edge(480, 488, 313.241000, true);
        graph.edge(263, 306, 482.394000, true);
        graph.edge(293, 369, 270.454000, false);
        graph.edge(84, 170, 848.733000, true);
        graph.edge(405, 211, 205.644000, false);
        graph.edge(51, 137, 294.767000, true);
        graph.edge(348, 140, 529.522000, false);
        graph.edge(167, 427, 721.262000, true);
        graph.edge(32, 320, 308.639000, true);
        graph.edge(129, 198, 575.816000, true);
        graph.edge(77, 493, 380.929000, true);
        graph.edge(220, 225, 535.637000, true);
        graph.edge(323, 453, 377.782000, true);
        graph.edge(359, 366, 595.594000, true);
        graph.edge(123, 192, 848.099000, true);
        graph.edge(482, 489, 424.172000, true);
        graph.edge(92, 180, 549.268000, true);
        graph.edge(10, 23, 789.191000, true);
        graph.edge(374, 411, 912.048000, true);
        graph.edge(19, 381, 974.129000, true);
        graph.edge(335, 438, 429.498000, true);
        graph.edge(136, 140, 125.810000, true);
        graph.edge(273, 354, 509.711000, true);
        graph.edge(32, 215, 736.345000, true);
        graph.edge(198, 293, 490.430000, true);
        graph.edge(46, 312, 136.142000, true);
        graph.edge(382, 129, 83.753000, false);
        graph.edge(3, 236, 756.262000, true);
        graph.edge(393, 82, 1008.079000, false);
        graph.edge(86, 285, 787.325000, true);
        graph.edge(158, 326, 766.387000, true);
        graph.edge(34, 366, 578.869000, true);
        graph.edge(358, 87, 152.337000, false);
        graph.edge(61, 294, 364.161000, true);
        graph.edge(104, 231, 598.703000, true);
        graph.edge(69, 347, 826.514000, true);
        graph.edge(125, 446, 168.099000, true);
        graph.edge(310, 339, 445.570000, true);
        graph.edge(78, 448, 219.414000, true);
        graph.edge(67, 383, 270.880000, true);
        graph.edge(356, 474, 818.584000, true);
        graph.edge(68, 219, 991.931000, true);
        graph.edge(234, 437, 678.027000, true);
        graph.edge(6, 28, 323.251000, true);
        graph.edge(142, 163, 482.124000, true);
        graph.edge(393, 464, 476.947000, true);
        graph.edge(50, 199, 61.471000, true);
        graph.edge(32, 340, 350.684000, true);
        graph.edge(397, 262, 195.904000, false);
        graph.edge(150, 414, 796.014000, true);
        graph.edge(214, 209, 419.564000, false);
        graph.edge(439, 475, 415.049000, true);
        graph.edge(63, 24, 771.504000, false);
        graph.edge(14, 428, 163.058000, false);
        graph.edge(49, 367, 115.443000, true);
        graph.edge(50, 286, 553.077000, true);
        graph.edge(4, 287, 702.568000, true);
        graph.edge(65, 179, 370.175000, true);
        graph.edge(289, 467, 736.767000, true);
        graph.edge(83, 309, 113.102000, true);
        graph.edge(402, 422, 777.054000, true);
        graph.edge(135, 116, 337.078000, false);
        graph.edge(265, 436, 290.516000, true);
        graph.edge(147, 191, 786.674000, true);
        graph.edge(263, 412, 118.514000, true);
        graph.edge(317, 327, 809.205000, true);
        graph.edge(140, 346, 75.813000, true);
        graph.edge(19, 63, 464.907000, true);
        graph.edge(67, 300, 597.023000, true);
        graph.edge(249, 325, 30.139000, true);
        graph.edge(350, 304, 781.558000, false);
        graph.edge(107, 254, 399.668000, true);
        graph.edge(104, 489, 344.210000, true);
        graph.edge(426, 197, 402.359000, false);
        graph.edge(468, 425, 673.344000, false);
        graph.edge(14, 196, 628.693000, true);
        graph.edge(280, 382, 546.074000, true);
        graph.edge(167, 492, 933.413000, true);
        graph.edge(8, 210, 433.735000, true);
        graph.edge(147, 456, 470.260000, true);
        graph.edge(150, 179, 730.003000, true);
        graph.edge(23, 294, 230.071000, true);
        graph.edge(110, 233, 320.726000, true);
        graph.edge(352, 455, 242.150000, false);
        graph.edge(314, 494, 1010.148000, true);
        graph.edge(115, 296, 599.550000, true);
        graph.edge(31, 207, 394.408000, true);
        graph.edge(86, 268, 727.376000, true);
        graph.edge(286, 368, 419.961000, true);
        graph.edge(261, 346, 199.715000, true);
        graph.edge(77, 221, 633.881000, false);
        graph.edge(141, 213, 1063.995000, true);
        graph.edge(190, 218, 817.066000, true);
        graph.edge(83, 266, 837.094000, true);
        graph.edge(119, 138, 641.353000, true);
        graph.edge(124, 380, 647.340000, true);
        graph.edge(127, 276, 978.751000, false);
        graph.edge(146, 192, 665.225000, true);
        graph.edge(218, 419, 668.070000, true);
        graph.edge(161, 328, 854.039000, true);
        graph.edge(96, 247, 772.059000, false);
        graph.edge(38, 144, 665.835000, true);
        graph.edge(106, 188, 968.153000, true);
        graph.edge(348, 379, 703.038000, true);
        graph.edge(102, 339, 745.685000, true);
        graph.edge(272, 475, 449.203000, true);
        graph.edge(231, 286, 515.665000, true);
        graph.edge(193, 317, 54.174000, false);
        graph.edge(179, 330, 412.530000, false);
        graph.edge(332, 496, 414.788000, true);
        graph.edge(235, 366, 222.790000, true);
        graph.edge(3, 126, 659.983000, true);
        graph.edge(382, 443, 408.897000, true);
        graph.edge(115, 433, 140.909000, true);
        graph.edge(210, 467, 965.154000, true);
        graph.edge(255, 418, 544.214000, true);
        graph.edge(315, 488, 282.970000, true);
        graph.edge(178, 226, 328.358000, true);
        graph.edge(191, 478, 711.341000, true);
        graph.edge(7, 207, 316.000000, true);
        graph.edge(447, 492, 311.282000, true);
        graph.edge(360, 368, 825.947000, true);
        graph.edge(422, 485, 371.446000, true);
        graph.edge(84, 367, 388.995000, true);
        graph.edge(15, 214, 107.288000, true);
        graph.edge(251, 337, 414.504000, true);
        graph.edge(32, 447, 333.267000, true);
        graph.edge(74, 286, 722.103000, true);
        graph.edge(19, 445, 598.916000, true);
        graph.edge(273, 417, 138.482000, true);
        graph.edge(148, 471, 226.874000, true);
        graph.edge(359, 488, 399.275000, true);
        graph.edge(199, 273, 201.761000, true);
        graph.edge(296, 470, 633.916000, true);
        graph.edge(436, 478, 594.360000, true);
        graph.edge(413, 85, 167.413000, false);
        graph.edge(129, 374, 565.468000, true);
        graph.edge(42, 85, 59.365000, true);
        graph.edge(141, 380, 778.731000, true);
        graph.edge(363, 413, 501.217000, true);
        graph.edge(182, 411, 430.316000, true);
        graph.edge(294, 298, 793.253000, true);
        graph.edge(117, 395, 252.236000, false);
        graph.edge(83, 490, 419.973000, true);
        graph.edge(111, 284, 269.163000, false);
        graph.edge(305, 486, 400.601000, true);
        graph.edge(125, 226, 138.041000, true);
        graph.edge(5, 273, 244.853000, true);
        graph.edge(117, 170, 617.657000, true);
        graph.edge(22, 465, 257.423000, true);
        graph.edge(172, 401, 881.599000, true);
        graph.edge(435, 442, 193.232000, true);
        graph.edge(36, 198, 519.401000, true);
        graph.edge(105, 269, 610.234000, true);
        graph.edge(452, 493, 124.924000, true);
        graph.edge(306, 127, 983.375000, false);
        graph.edge(322, 482, 401.046000, true);
        graph.edge(372, 456, 87.185000, true);
        graph.edge(58, 296, 565.431000, true);
        graph.edge(40, 257, 736.799000, true);
        graph.edge(179, 222, 393.942000, true);
        graph.edge(425, 215, 840.347000, false);
        graph.edge(15, 74, 605.786000, true);
        graph.edge(101, 119, 652.500000, true);
        graph.edge(15, 467, 628.969000, true);
        graph.edge(432, 105, 525.591000, false);
        graph.edge(78, 272, 284.014000, false);
        graph.edge(32, 472, 340.297000, true);
        graph.edge(218, 406, 689.025000, true);
        graph.edge(99, 366, 651.578000, true);
        graph.edge(367, 378, 386.584000, true);
        graph.edge(55, 227, 396.610000, true);
        graph.edge(449, 456, 755.874000, true);
        graph.edge(147, 208, 195.479000, true);
        graph.edge(21, 310, 627.310000, true);
        graph.edge(89, 201, 525.156000, true);
        graph.edge(83, 358, 250.541000, true);
        graph.edge(358, 439, 402.590000, true);
        graph.edge(263, 319, 366.427000, true);
        graph.edge(326, 377, 833.256000, true);
        graph.edge(227, 299, 842.687000, true);
        graph.edge(209, 281, 784.091000, true);
        graph.edge(81, 288, 202.062000, true);
        graph.edge(295, 357, 297.670000, true);
        graph.edge(0, 286, 579.237000, true);
        graph.edge(147, 229, 485.445000, true);
        graph.edge(246, 288, 316.577000, true);
        graph.edge(218, 334, 982.088000, true);
        graph.edge(344, 389, 315.175000, true);
        graph.edge(91, 396, 535.257000, true);
        graph.edge(161, 304, 1096.368000, true);
        graph.edge(65, 368, 635.541000, true);
        graph.edge(249, 347, 601.923000, false);
        graph.edge(161, 484, 267.012000, true);
        graph.edge(20, 53, 886.409000, true);
        graph.edge(288, 338, 694.380000, true);
        graph.edge(100, 376, 743.783000, true);
        graph.edge(231, 359, 427.719000, true);
        graph.edge(212, 479, 334.651000, true);
        graph.edge(111, 397, 213.697000, true);
        graph.edge(430, 291, 147.846000, false);
        graph.edge(38, 294, 710.009000, true);
        graph.edge(39, 117, 542.684000, true);
        graph.edge(57, 88, 435.229000, true);
        graph.edge(399, 400, 267.657000, true);
        graph.edge(109, 138, 613.221000, true);
        graph.edge(108, 487, 1164.464000, true);
        graph.edge(75, 254, 816.481000, true);
        graph.edge(42, 267, 547.828000, true);
        graph.edge(243, 287, 599.926000, true);
        graph.edge(260, 360, 267.818000, true);
        graph.edge(183, 305, 103.877000, true);
        graph.edge(20, 289, 701.146000, true);
        graph.edge(105, 498, 636.059000, true);
        graph.edge(92, 267, 691.269000, true);
        graph.edge(113, 260, 508.610000, true);
        graph.edge(67, 276, 127.081000, true);
        graph.edge(105, 173, 478.927000, true);
        graph.edge(319, 427, 620.269000, true);
        graph.edge(109, 214, 509.860000, true);
        graph.edge(414, 443, 280.047000, true);
        graph.edge(81, 263, 323.232000, true);
        graph.edge(132, 214, 335.064000, true);
        graph.edge(272, 292, 338.801000, true);
        graph.edge(267, 278, 247.207000, true);
        graph.edge(399, 492, 519.194000, false);
        graph.edge(57, 159, 350.127000, true);
        graph.edge(95, 228, 640.195000, false);
        graph.edge(331, 405, 368.798000, true);
        graph.edge(130, 357, 173.455000, true);
        graph.edge(240, 420, 461.348000, false);
        graph.edge(93, 482, 215.214000, true);
        graph.edge(350, 386, 706.981000, true);
        graph.edge(10, 371, 328.353000, true);
        graph.edge(268, 423, 595.627000, true);
        graph.edge(18, 429, 508.781000, true);
        graph.edge(113, 488, 368.268000, true);
        graph.edge(7, 152, 109.705000, true);
        graph.edge(278, 495, 323.521000, true);
        graph.edge(139, 259, 343.319000, true);
        graph.edge(149, 256, 672.538000, true);
        graph.edge(376, 464, 669.440000, true);
        graph.edge(28, 133, 45.110000, true);
        graph.edge(186, 264, 138.457000, true);
        graph.edge(149, 207, 291.750000, true);
        graph.edge(122, 375, 210.547000, true);
        graph.edge(103, 157, 353.720000, true);
        graph.edge(325, 327, 655.919000, true);
        graph.edge(113, 339, 468.088000, true);
        graph.edge(35, 122, 531.090000, true);
        graph.edge(118, 134, 231.091000, true);
        graph.edge(203, 299, 779.201000, true);
        graph.edge(12, 444, 229.760000, true);
        graph.edge(29, 424, 275.137000, true);
        graph.edge(114, 280, 376.603000, true);
        graph.edge(129, 94, 183.770000, false);
        graph.edge(7, 351, 973.661000, true);
        graph.edge(175, 407, 182.178000, true);
        graph.edge(33, 70, 714.303000, true);
        graph.edge(71, 215, 224.835000, true);
        graph.edge(14, 294, 521.302000, true);
        graph.edge(429, 446, 349.580000, true);
        graph.edge(427, 482, 369.639000, true);
        graph.edge(316, 430, 255.442000, true);
        graph.edge(407, 450, 125.190000, false);
        graph.edge(404, 475, 288.868000, true);
        graph.edge(460, 484, 887.295000, true);
        graph.edge(258, 461, 694.951000, true);
        graph.edge(91, 469, 217.155000, true);
        graph.edge(19, 308, 364.235000, true);
        graph.edge(306, 497, 164.485000, true);
        graph.edge(17, 141, 1098.876000, true);
        graph.edge(115, 156, 337.247000, true);
        graph.edge(24, 439, 571.764000, true);
        graph.edge(134, 312, 302.351000, true);
        graph.edge(73, 363, 829.862000, true);
        graph.edge(426, 468, 616.967000, true);
        graph.edge(258, 316, 282.046000, true);
        graph.edge(223, 373, 572.911000, true);
        graph.edge(56, 92, 329.278000, true);
        graph.edge(177, 351, 317.262000, true);
        graph.edge(230, 283, 1098.500000, true);
        graph.edge(362, 406, 598.982000, true);
        graph.edge(161, 305, 785.975000, true);
        graph.edge(6, 337, 625.226000, true);
        graph.edge(192, 464, 527.312000, true);
        graph.edge(166, 190, 926.602000, true);
        graph.edge(344, 464, 251.501000, false);
        graph.edge(97, 330, 613.524000, true);
        graph.edge(44, 179, 722.124000, true);
        graph.edge(239, 269, 186.496000, true);
        graph.edge(45, 456, 518.109000, true);
        graph.edge(114, 429, 122.621000, true);
        graph.edge(119, 297, 436.570000, true);
        graph.edge(210, 483, 252.988000, true);
        graph.edge(118, 220, 421.392000, true);
        graph.edge(180, 478, 333.690000, true);
        graph.edge(341, 319, 851.313000, false);
        graph.edge(265, 422, 358.835000, true);
        graph.edge(41, 311, 136.744000, true);
        graph.edge(104, 129, 670.296000, true);
        graph.edge(244, 288, 366.576000, true);
        graph.edge(91, 446, 285.395000, true);
        graph.edge(55, 371, 699.927000, true);
        graph.edge(344, 495, 385.774000, true);
        graph.edge(158, 293, 720.275000, true);
        graph.edge(208, 215, 329.692000, true);
        graph.edge(303, 354, 151.692000, true);
        graph.edge(326, 367, 327.475000, false);
        graph.edge(96, 160, 585.105000, true);
        graph.edge(301, 361, 379.821000, true);
        graph.edge(319, 185, 754.352000, false);
        graph.edge(15, 304, 635.813000, true);
        graph.edge(382, 427, 818.262000, true);
        graph.edge(31, 159, 130.357000, true);
        graph.edge(48, 164, 380.561000, false);
        graph.edge(352, 464, 595.470000, true);
        graph.edge(337, 388, 832.366000, true);
        graph.edge(135, 258, 432.490000, true);
        graph.edge(289, 280, 596.912000, false);
        graph.edge(220, 271, 460.959000, true);
        graph.edge(229, 462, 629.047000, true);
        graph.edge(158, 293, 714.512000, true);
        graph.edge(300, 391, 276.752000, true);
        graph.edge(21, 21, 0.000000, true);
        graph.edge(72, 286, 418.527000, true);
        graph.edge(28, 442, 539.479000, true);
        graph.edge(160, 180, 359.855000, false);
        graph.edge(286, 300, 473.407000, true);
        graph.edge(1, 389, 490.317000, true);
        graph.edge(24, 370, 467.083000, true);
        graph.edge(169, 341, 702.889000, true);
        graph.edge(376, 499, 897.646000, true);
        graph.edge(271, 328, 314.821000, true);
        graph.edge(58, 277, 392.848000, true);
        graph.edge(114, 442, 389.418000, true);
        graph.edge(335, 78, 372.831000, false);
        graph.edge(94, 141, 891.361000, true);
        graph.edge(232, 467, 615.547000, true);
        graph.edge(141, 226, 502.549000, true);
        graph.edge(71, 194, 643.124000, true);
        graph.edge(174, 277, 518.091000, true);
        graph.edge(163, 363, 307.410000, true);
        graph.edge(177, 344, 186.843000, true);
        graph.edge(207, 359, 151.772000, true);
        graph.edge(265, 486, 264.172000, false);
        graph.edge(264, 490, 466.034000, true);
        graph.edge(30, 223, 644.597000, true);
        graph.edge(106, 345, 497.809000, true);
        graph.edge(312, 353, 86.716000, true);
        graph.edge(462, 475, 138.592000, true);
        graph.edge(148, 364, 658.865000, true);
        graph.edge(88, 340, 561.245000, true);
        graph.edge(244, 312, 696.295000, true);
        graph.edge(53, 251, 549.691000, true);
        graph.edge(11, 321, 132.636000, true);
        graph.edge(399, 484, 486.973000, true);
        graph.edge(51, 469, 641.483000, true);
        graph.edge(13, 86, 748.925000, true);
        graph.edge(392, 498, 376.306000, true);
        graph.edge(70, 296, 458.695000, true);
        graph.edge(146, 216, 439.437000, true);
        graph.edge(78, 348, 898.370000, true);
        graph.edge(436, 480, 612.192000, true);
        graph.edge(115, 213, 716.813000, true);
        graph.edge(359, 431, 713.787000, true);
        compareWithDijkstra();
    }

    private int getNumComponents() {
        PrepareRoutingSubnetworks ps = new PrepareRoutingSubnetworks(graph, Arrays.<FlagEncoder>asList(encoder));
        ps.setMinOneWayNetworkSize(1);
        ps.setMinNetworkSize(1);
        ps.doWork();
        return ps.getMaxSubnetworks();
    }

    private void compareWithDijkstra() {
        if (algoString.equals("alt"))
            prepareLM();
        for (int i = 0; i < 100_000; ++i) {
            RoutingAlgorithm algo = algoFactory.createAlgo();
            DijkstraBidirectionRef refAlgo = new DijkstraBidirectionRef(graph, weighting, TraversalMode.NODE_BASED);

            int from = rnd.nextInt(graph.getNodes());
            int to = rnd.nextInt(graph.getNodes());
            Path path = algo.calcPath(from, to);
            Path refPath = refAlgo.calcPath(from, to);
            double weight = path.getWeight();
            double refWeight = refPath.getWeight();
            // todo: using very rough threshold, but sometimes there are large deviations
            if (Math.abs(refWeight - weight) > 1) {
                GHUtility.printGraphForUnitTest(graph, encoder);
                System.out.println("dijkstra: " + refPath.calcNodes());
                System.out.println(algoString + ": " + path.calcNodes());
                fail(from + "->" + to + ", dijkstra: " + refWeight + " vs. " + algoString + ": " + path.getWeight());
            }
            // todo: compare calculated distances and nodes as well as soon as weights match
        }
    }

    private void prepareLM() {
        // todo: use different settings for LM ?
        int numLandMarks = 4;
        int numActiveLandmarks = 4;
        plm = new PrepareLandmarks(dir, graph, weighting, numLandMarks, numActiveLandmarks);
        plm.doWork();
    }

    private AlgoFactory getAlgoFactory(String algoString) {
        switch (algoString) {
            case "astar":
                return new AlgoFactory() {
                    @Override
                    public RoutingAlgorithm createAlgo() {
                        return new AStar(graph, weighting, traversalMode);
                    }
                };
            case "astarbi":
                return new AlgoFactory() {
                    @Override
                    public RoutingAlgorithm createAlgo() {
                        return new AStarBidirection(graph, weighting, traversalMode);
                    }
                };
            case "alt":
                return new AlgoFactory() {
                    @Override
                    public RoutingAlgorithm createAlgo() {
                        AStarBidirection baseAlgo = new AStarBidirection(graph, weighting, traversalMode);
                        return plm.getDecoratedAlgorithm(graph, baseAlgo, AlgorithmOptions.start().build());
                    }
                };
            case "ch":
                return new AlgoFactory() {
                    @Override
                    public RoutingAlgorithm createAlgo() {
                        return pch.createAlgo(chGraph, AlgorithmOptions.start().build());
                    }
                };
            default:
                throw new IllegalArgumentException("unknown algo string: " + algoString);
        }
    }

    private interface AlgoFactory {
        RoutingAlgorithm createAlgo();
    }
}
